nir2292
Nir Erez

=============================
=      File description     =
=============================
README
QUESTIONS

-- oop.ex6.main --
Parser.java
Sjavac.java
Type.java
Validator.java
Variable.java
VariableFactory.java
badFileFormatException.java
badMethodCallException.java
endOfFileException.java
illegalAssignmentException.java
illegalLineException.java
illegalNameException.java
illegalValueException.java
noSuchMethodException.java
noSuchTypeException.java
noSuchVariableException.java



-- oop.ex6.scopes --
ConditionScope.java
MethodScope.java
Scope.java
ScopeFactory.java
badConditionFormat.java
illegalVariableDeclerationException.java


=============================
=          Design           =
=============================
Our design is as follows:
Sjavac class is the manager of the program - handle files i\o and outputs for the user.
Calls Parser class for processing of file.

Parser class - reads the file line by line and constructs Scope objects for each scope in the code with the ScopeFactory.

ScopeFactory - receives a header for a scope and generates scopes accordingly.
Each Scope consists of Variables-objects and that represent the different variables.
Variables types are represented as Type Enum - with which we created a "pool" for supported variables types.
Expanding supported variables types is encapsulated only for Type Enum.

when parsing process is completed we use Validator to handle Variable assignment and method calls.

=============================
=  Implementation details   =
=============================
Parser uses buffer reader to go over the file line by line.
Regular expressions are used to check validity of code lines.
Scopes are generated via ScopeFactory's static factory method.
Each scope type (loops, methods etc) inherit from a Scope super-class.
Each scope holds the different variables, mthods-calls, variables assignments, etc.
Variable objects control variable handling using Enum for Type safety control.

Exceptions that causes the code to be invalid inherit from badFileFormatException.
Exceptions that causes the code to fail because of illegal code usage inherit from illegalCodeFormatException.
Both super-class Exception types inherit from InValidCodeException.